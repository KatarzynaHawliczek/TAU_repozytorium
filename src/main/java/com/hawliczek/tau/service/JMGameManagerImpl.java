package com.hawliczek.tau.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.LinkedList;
import java.util.List;

import org.springframework.stereotype.Component;

import com.hawliczek.tau.domain.JMGame;

@Component
public class JMGameManagerImpl implements JMGameManager
{
	private Connection connection;

	private PreparedStatement addGameStmt;
	private PreparedStatement getAllGamesStmt;
	private PreparedStatement deleteGameStmt;
    private PreparedStatement getGameByIdStmt;
	private PreparedStatement updateGameStmt;
    private PreparedStatement deleteAllGamesStmt;
	
	public JMGameManagerImpl(Connection connection) throws SQLException
	{
		this.connection = connection;
		
		if(!isDatabaseReady())
		{
			createTables();
		}
		
		setConnection(connection);
	}
	
	public JMGameManagerImpl() throws SQLException
	{
		this.connection = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");
		
		if(!isDatabaseReady())
		{
			createTables();
		}
		
		this.setConnection(this.connection);
	}
	
	@Override
	public Connection getConnection()
	{
		return connection;
	}

	@Override
	public void setConnection(Connection connection) throws SQLException
	{
		this.connection = connection;
		addGameStmt = connection.prepareStatement("INSERT INTO game (title, genre, developer, publisher, releaseDate) VALUES (?, ?, ?, ?, ?)", Statement.RETURN_GENERATED_KEYS);
		deleteGameStmt = connection.prepareStatement("DELETE FROM game WHERE id = ?");
		deleteAllGamesStmt = connection.prepareStatement("DELETE FROM game");
		getAllGamesStmt = connection.prepareStatement("SELECT id, title, genre, developer, publisher, releaseDate FROM game ORDER BY id");
		getGameByIdStmt = connection.prepareStatement("SELECT id, title, genre, developer, publisher, releaseDate FROM game WHERE id = ?");
		updateGameStmt = connection.prepareStatement("UPDATE game SET title=?, genre=?, developer=?, publisher=?, releaseDate=? WHERE id=?");
	}
	
	private void createTables() throws SQLException
	{
		connection.createStatement()
		        .executeUpdate("CREATE TABLE game ("
		        		+ "id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1), "
		        		+ "title VARCHAR(100) NOT NULL, "
		        		+ "genre VARCHAR(30), "
		        		+ "developer VARCHAR(100), "
		        		+ "publisher VARCHAR(100), "
		        		+ "releaseDate VARCHAR(10))"
		);	
	}

	private boolean isDatabaseReady()
	{
		try
		{
			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while(rs.next())
			{
				if("game".equalsIgnoreCase(rs.getString("TABLE_NAME")))
				{
					tableExists = true;
					break;
				}
			}
			return tableExists;
		}
		catch(SQLException e)
		{
			return false;
		}
	}

	@Override
	public int addGame(JMGame gameToCreate)
	{   
		int count = 0;
		try
		{
			addGameStmt.setString(1, gameToCreate.getTitle());
			addGameStmt.setString(2, gameToCreate.getGenre());
			addGameStmt.setString(3, gameToCreate.getDeveloper());
			addGameStmt.setString(4, gameToCreate.getPublisher());
			addGameStmt.setString(5, gameToCreate.getReleaseDate());
			count = addGameStmt.executeUpdate();
			ResultSet generatedKeys = addGameStmt.getGeneratedKeys();
			if(generatedKeys.next())
			{
				gameToCreate.setId(generatedKeys.getInt(1));
			}
		}
		catch(SQLException e)
		{
			throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
		}
		return count;
	}

	@Override
	public List<JMGame> getAllGames()
	{
		List<JMGame> games = new LinkedList<>();
		
		try
		{
			ResultSet rs = getAllGamesStmt.executeQuery();
			while(rs.next())
			{
				JMGame g = new JMGame();
				g.setId(rs.getInt("id"));
				g.setTitle(rs.getString("title"));
				g.setGenre(rs.getString("genre"));
				g.setDeveloper(rs.getString("developer"));
				g.setPublisher(rs.getString("publisher"));
				g.setReleaseDate(rs.getString("releaseDate"));
				games.add(g);
			}
		}
		catch(SQLException e)
		{
			throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
		}
		return games;
	}

	@Override
	public int deleteGame(JMGame game)
	{
		try
		{
			deleteGameStmt.setInt(1, game.getId());
			return deleteGameStmt.executeUpdate();
		}
		catch(SQLException e)
		{
			throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
		}
	}
	
	@Override
	public int updateGame(JMGame gameToUpdate) throws SQLException
	{	
		int count = 0;
		
		try
		{
			updateGameStmt.setString(1, gameToUpdate.getTitle());
			updateGameStmt.setString(2, gameToUpdate.getGenre());
			updateGameStmt.setString(3, gameToUpdate.getDeveloper());
			updateGameStmt.setString(4, gameToUpdate.getPublisher());
			updateGameStmt.setString(5, gameToUpdate.getReleaseDate());
			updateGameStmt.setInt(6, gameToUpdate.getId());
			count = updateGameStmt.executeUpdate();
		}
		catch(SQLException e)
		{
			throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
		}
		
		if(count <= 0)
		{
			throw new SQLException("Game not found for update");
		}
		return count;
	}
	
	@Override
	public JMGame getGameById(int id) throws SQLException
	{
		try
		{
			getGameByIdStmt.setInt(1, id);
			ResultSet rs = getGameByIdStmt.executeQuery();
			if(rs.next())
			{
				JMGame g = new JMGame();
				g.setId(rs.getInt("id"));
				g.setTitle(rs.getString("title"));
				g.setGenre(rs.getString("genre"));
				g.setDeveloper(rs.getString("developer"));
				g.setPublisher(rs.getString("publisher"));
				g.setReleaseDate(rs.getString("releaseDate"));
				return g;
			}
		}
		catch(SQLException e)
		{
			throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
		}
		throw new SQLException("Game with id " + id + " does not exist");
	}

	@Override
	public int deleteAll()
	{
		try
		{
			return deleteAllGamesStmt.executeUpdate();
		}
		catch(SQLException e)
		{
			throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
		}
	}
}

